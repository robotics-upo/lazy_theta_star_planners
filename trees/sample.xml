<root main_tree_to_execute="BehaviorTree">
    <!-- ////////// -->
    <BehaviorTree ID="BehaviorTree">
        <Sequence>
            <Action ID="CheckKey" yes_key="y" no_key="n"/>
            <SubTree ID="goal 2 tries"/>
            <Action ID="PublishStdString" latch="0" queue_size="1" data="The robot has arrived, you can go to next point" topic="/continue"/>
            <Action ID="CheckKey" yes_key="y" no_key="n"/>
        </Sequence>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="Test">
        <Fallback>
            <Action y="" ID="UPOMakePlanCustom" state="" percent="" action="" z="" x="" not_possible=""/>
            <Action y="" ID="UPOMakePlanCustom" state="" percent="" action="" z="" x="" not_possible=""/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <BehaviorTree ID="goal 2 tries">
        <Fallback>
            <Action y="" ID="UPOMakePlanCustom" state="" percent="" action="" z="" x="" not_possible=""/>
            <Action y="" ID="UPOMakePlanCustomGoal" state="" action="" z="" x="" serialized_result="" serialized_feedback=""/>
        </Fallback>
    </BehaviorTree>
    <!-- ////////// -->
    <TreeNodesModel>
        <Condition ID="CheckBool">
            <input_port name="input" type="bool">Input boolean value</input_port>
        </Condition>
        <Action ID="CheckKey">
            <input_port name="no_key" type="std::string">Key to determine if key to say 'no' has benn pressed</input_port>
            <input_port name="yes_key" type="std::string">Key to determine if key to say 'yes' has been pressed</input_port>
        </Action>
        <Condition ID="CompareNumbers">
            <input_port name="comparison_op" type="std::string">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>
            <input_port name="first" type="double">First operand</input_port>
            <input_port name="second" type="double">Second operand</input_port>
        </Condition>
        <Condition ID="CompareStrings">
            <input_port name="comparison_op" type="std::string">Comparison operator. Valid operators are &lt;, >, &lt;=, >=, == and !=</input_port>
            <input_port name="first" type="std::string">First operand</input_port>
            <input_port name="second" type="std::string">Second operand</input_port>
        </Condition>
        <Action ID="ConcatenateStrings">
            <input_port name="first" type="std::string">First string</input_port>
            <output_port name="output" type="std::string">Concatenated result string</output_port>
            <input_port name="second" type="std::string">Second string</input_port>
        </Action>
        <Action ID="ConvertJsonToDouble">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="double">Output variable</output_port>
        </Action>
        <Action ID="ConvertJsonToInt64">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="long">Output variable</output_port>
        </Action>
        <Action ID="ConvertJsonToString">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="std::string">Output variable</output_port>
        </Action>
        <Action ID="ConvertJsonToUint64">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="unsigned long">Output variable</output_port>
        </Action>
        <Action ID="ConvertMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="void">Output variable</output_port>
        </Action>
        <Action ID="ConvertRandomMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="void">Output variable</output_port>
        </Action>
        <Decorator ID="CooldownMilliseconds">
            <input_port name="cooldown" type="unsigned int" default="0">Cooldown time</input_port>
        </Decorator>
        <Decorator ID="CooldownSeconds">
            <input_port name="cooldown" type="unsigned int" default="0">Cooldown time</input_port>
        </Decorator>
        <Action ID="CopyJson">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Input variable</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Output variable to copy to</output_port>
        </Action>
        <Action ID="DebugLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Action ID="ErrorLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Action ID="FatalLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Action ID="FindByFieldValue">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="void">Output variable</output_port>
            <input_port name="value" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Value to search for</input_port>
        </Action>
        <Action ID="FindSubstrings">
            <input_port name="input" type="std::string">String to look into</input_port>
            <input_port name="substrings" type="std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> > > >">Substrings to look for</input_port>
        </Action>
        <Decorator ID="ForEachLoop">
            <input_port name="break_on_child_failure" type="bool">Break loop on child failure?</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Input sequence</input_port>
            <output_port name="output_element" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Output element variable</output_port>
            <output_port name="output_index" type="unsigned long">Output index variable</output_port>
        </Decorator>
        <Action ID="GetJsonSize">
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Input sequence</input_port>
            <output_port name="output" type="unsigned long">Sequence size output</output_port>
        </Action>
        <Action ID="GetKeyboard">
            <output_port name="output" type="std::string">String received from keyboard</output_port>
        </Action>
        <Action ID="GetMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Output variable</output_port>
        </Action>
        <Action ID="GetRandomMessageField">
            <input_port name="field" type="std::string">Field to fetch</input_port>
            <input_port name="input" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message</input_port>
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Output variable</output_port>
        </Action>
        <Action ID="GetTransformDistance">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="output" type="double">Distance form transform origin</output_port>
        </Action>
        <Action ID="GetTransformHorizontalDistance">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="output" type="double">2D distance from TF transform origin</output_port>
        </Action>
        <Action ID="GetTransformOrigin">
            <input_port name="input" type="tf::StampedTransform">TF transform</input_port>
            <output_port name="x" type="double">Origin x coordinate</output_port>
            <output_port name="y" type="double">Origin y coordinate</output_port>
            <output_port name="z" type="double">Origin z coordinate</output_port>
        </Action>
        <Action ID="InfoLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Action ID="InitializeJson">
            <output_port name="output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Output variable to initialize</output_port>
        </Action>
        <Control ID="Interruptible"/>
        <Action ID="LookupTransform">
            <output_port name="output" type="tf::StampedTransform">Result transform</output_port>
            <input_port name="source_frame" type="std::string">Origin TF frame</input_port>
            <input_port name="target_frame" type="std::string">Target TF frame</input_port>
            <input_port name="use_last_available" type="bool" default="0">Use last available transform?</input_port>
        </Action>
        <Decorator ID="Loop"/>
        <Action ID="MathOperationFloat">
            <input_port name="first" type="double">First operand</input_port>
            <input_port name="operator" type="std::string">Math operation. Valid operatores are: +, -, / and *</input_port>
            <output_port name="output" type="double">Operation result</output_port>
            <input_port name="second" type="double">Second operand</input_port>
        </Action>
        <Action ID="MathOperationInt">
            <input_port name="first" type="int">First operand</input_port>
            <input_port name="operator" type="std::string">Math operation. Valid operatores are: +, -, / and *</input_port>
            <output_port name="output" type="int">Operation result</output_port>
            <input_port name="second" type="int">Second operand</input_port>
        </Action>
        <Action ID="MonitorStdBool">
            <input_port name="consume_msgs" type="bool" default="0">Should messages be consumed?</input_port>
            <input_port name="queue_size" type="unsigned int" default="1">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [std_msgs::Bool_&lt;std::allocator&lt;void> >]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="MonitorStdFloat64">
            <input_port name="consume_msgs" type="bool" default="0">Should messages be consumed?</input_port>
            <input_port name="queue_size" type="unsigned int" default="1">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [std_msgs::Float64_&lt;std::allocator&lt;void> >]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="MonitorStdInt32">
            <input_port name="consume_msgs" type="bool" default="0">Should messages be consumed?</input_port>
            <input_port name="queue_size" type="unsigned int" default="1">Subscriber callback queue size</input_port>
            <output_port name="serialized_output" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [std_msgs::Int32_&lt;std::allocator&lt;void> >]</output_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <Action ID="OStreamNode">
            <input_port name="message" type="std::string">String to print</input_port>
        </Action>
        <Decorator ID="OnlyOnce"/>
        <Action ID="PublishStdString">
            <input_port name="data" type="std::string">Auto-generated field from std_msgs::String_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="latch" type="bool" default="0">Latch messages?</input_port>
            <input_port name="queue_size" type="unsigned int" default="1">Internal publisher queue size</input_port>
            <input_port name="topic" type="std::string">Topic to publish to</input_port>
        </Action>
        <Action ID="RandomFloat">
            <input_port name="max" type="double">Max range value</input_port>
            <input_port name="min" type="double">Minimum range value</input_port>
            <output_port name="result" type="double">Random result value</output_port>
        </Action>
        <Action ID="RandomInteger">
            <input_port name="max" type="int">Max range value</input_port>
            <input_port name="min" type="int">Minimum range value</input_port>
            <output_port name="result" type="int">Random result value</output_port>
        </Action>
        <Action ID="RandomSequenceValue">
            <input_port name="delimiter" type="std::string" default=";">Sequence entries delimiter</input_port>
            <output_port name="output" type="std::string">Result random sequence entry</output_port>
            <input_port name="sequence" type="std::string">Sequence to randomize</input_port>
        </Action>
        <Action ID="SubscribeUPOGoal">
            <input_port name="consume_msgs" type="bool" default="0">Should messages be consumed?</input_port>
            <output_port name="output" type="upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >">Received ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</output_port>
            <input_port name="queue_size" type="unsigned int" default="1">Subscriber callback queue size</input_port>
            <input_port name="topic" type="std::string">Topic to subscribe</input_port>
        </Action>
        <SubTree ID="Test"/>
        <Action ID="UPOMakePlanAutomatic">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="global_goal.header.frame_id" type="std::string">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.header.seq" type="unsigned int">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.w" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.x" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.y" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.z" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.position.x" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.position.y" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.position.z" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [upo_actions::MakePlanFeedback_&lt;std::allocator&lt;void> >]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [upo_actions::MakePlanResult_&lt;std::allocator&lt;void> >]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="UPOMakePlanCustom">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="not_possible" type="bool">Not possible</output_port>
            <output_port name="percent" type="std::string">Percent achieved</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="x" type="double">Goal x</input_port>
            <input_port name="y" type="double">Goal y</input_port>
            <input_port name="z" type="double">Goal z</input_port>
        </Action>
        <Action ID="UPOMakePlanCustomGoal">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="serialized_feedback" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [upo_actions::MakePlanFeedback_&lt;std::allocator&lt;void> >]</output_port>
            <output_port name="serialized_result" type="nlohmann::basic_json&lt;std::map, std::vector, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char>, std::allocator&lt;char> >, bool, long, unsigned long, double, std::allocator, nlohmann::adl_serializer>">Serialized ROS message [upo_actions::MakePlanResult_&lt;std::allocator&lt;void> >]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
            <input_port name="x" type="double">Goal x</input_port>
            <input_port name="y" type="double">Goal y</input_port>
            <input_port name="z" type="double">Goal z</input_port>
        </Action>
        <Action ID="UPOMakePlanOnlyGoalAutomatic">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="global_goal.header.frame_id" type="std::string">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.header.seq" type="unsigned int">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.w" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.x" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.y" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.orientation.z" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.position.x" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.position.y" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <input_port name="global_goal.pose.position.z" type="double">Auto-generated field from upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> ></input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="UPOMakePlanOnlyGoalROSMsg">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <input_port name="input" type="upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >">Input ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</input_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="UPOMakePlanRosMessages">
            <input_port name="action" type="std::string">Actionlib action server name</input_port>
            <output_port name="feedback" type="upo_actions::MakePlanFeedback_&lt;std::allocator&lt;void> >">Received ROS message [upo_actions::MakePlanFeedback_&lt;std::allocator&lt;void> >]</output_port>
            <input_port name="input" type="upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >">Input ROS message [upo_actions::MakePlanGoal_&lt;std::allocator&lt;void> >]</input_port>
            <output_port name="result" type="upo_actions::MakePlanResult_&lt;std::allocator&lt;void> >">Received ROS message [upo_actions::MakePlanResult_&lt;std::allocator&lt;void> >]</output_port>
            <output_port name="state" type="actionlib::SimpleClientGoalState">Actionlib reported state</output_port>
        </Action>
        <Action ID="WaitMilliseconds">
            <input_port name="duration" type="unsigned int" default="0">Time to wait</input_port>
        </Action>
        <Action ID="WaitSeconds">
            <input_port name="duration" type="unsigned int" default="0">Time to wait</input_port>
        </Action>
        <Action ID="WarnLog">
            <input_port name="message" type="std::string">Message to log</input_port>
        </Action>
        <Decorator ID="WhileSuccess"/>
        <SubTree ID="goal 2 tries"/>
    </TreeNodesModel>
    <!-- ////////// -->
</root>

